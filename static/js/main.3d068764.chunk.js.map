{"version":3,"sources":["components/courseForm/form.js","components/courseList/list.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","addCourse","type","value","current","onChange","updateCourse","required","className","List","state","isEdit","renderCourse","details","name","onClick","toggleState","deleteCourse","index","setState","updateItem","e","preventDefault","editCourse","input","renderUpdate","ref","v","defaultValue","this","Component","App","courses","target","push","splice","listed","map","course","key","update","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAWeA,EATF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,WAClB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,aAAcC,UAAQ,IAC/E,2BAAOC,UAAU,MAAMN,KAAK,SAAUC,MAAM,iBC+CzCM,E,4MAjDXC,MAAQ,CACJC,QAAS,G,EAIbC,aAAe,WACX,OACI,4BACI,8BAAO,EAAKb,MAAMc,QAAQC,MAC1B,4BAAQC,QAAS,WAAO,EAAKC,gBAA7B,QACA,4BAAQD,QAAS,WAAO,EAAKhB,MAAMkB,aAAa,EAAKlB,MAAMmB,SAA3D,Y,EAMZF,YAAc,WAAO,IACZL,EAAS,EAAKD,MAAdC,OACL,EAAKQ,SAAS,CACVR,QAASA,K,EAIjBS,WAAa,SAACC,GACVA,EAAEC,iBACF,EAAKvB,MAAMwB,WAAW,EAAKxB,MAAMmB,MAAO,EAAKM,MAAMrB,OACnD,EAAKa,e,EAITS,aAAc,WACV,OACI,0BAAMzB,SAAU,EAAKoB,YACjB,2BAAOlB,KAAK,OAAOwB,IAAK,SAACC,GAAO,EAAKH,MAAQG,GAAIC,aAAc,EAAK7B,MAAMc,QAAQC,OAClF,4C,uDAKF,IACDH,EAAUkB,KAAKnB,MAAfC,OACL,OACI,kBAAC,WAAD,KACMA,EAASkB,KAAKJ,eAAiBI,KAAKjB,oB,GA7CnCkB,aCyEJC,E,4MApEbrB,MAAQ,CACNsB,QAAU,CACR,CAAClB,KAAM,QACP,CAACA,KAAM,OACP,CAACA,KAAM,WAETV,QAAU,I,EAKZE,aAAe,SAACe,GACd,EAAKF,SAAU,CACbf,QAASiB,EAAEY,OAAO9B,S,EAKtBF,UAAY,SAACoB,GACXA,EAAEC,iBADe,IAEZlB,EAAW,EAAKM,MAAhBN,QACA4B,EAAW,EAAKtB,MAAhBsB,QACLA,EAAQE,KAAK,CAACpB,KAAMV,IACpB,EAAKe,SAAU,CACba,QAASA,EACT5B,QAAQ,M,EAOZa,aAAa,SAACC,GAAW,IAClBc,EAAW,EAAKtB,MAAhBsB,QACLA,EAAQG,OAAOjB,EAAO,GACtB,EAAKC,SAAS,CACZa,QAASA,K,EAObT,WAAa,SAACL,EAAOf,GAAW,IACzB6B,EAAW,EAAKtB,MAAhBsB,QACQA,EAASd,GAChB,KAAWf,EACjB,EAAKgB,SAAU,CACba,a,uDAKM,IAAD,OAEDI,EADYP,KAAKnB,MAAhBsB,QACgBK,KAAK,SAACC,EAAQpB,GACnC,OAAO,kBAAC,EAAD,CAAML,QAASyB,EAAQC,IAAKrB,EAAOA,MAAOA,EAAOsB,OAAQ,EAAKC,aAAcxB,aAAc,EAAKA,aAAcM,WAAY,EAAKA,gBAEvI,OACE,6BAASf,UAAU,OACjB,0CACA,kBAAC,EAAD,CAAMJ,QAASyB,KAAKnB,MAAMN,QAASE,aAAcuB,KAAKvB,aAAcL,UAAW4B,KAAK5B,YACpF,4BAAKmC,Q,GAhEKN,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3d068764.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.addCourse}>\r\n            <input type=\"text\" value={props.current} onChange={props.updateCourse} required />\r\n            <input className=\"btn\" type=\"submit\"  value=\"Add Course\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, {Component, Fragment} from 'react';\r\n\r\nclass List extends Component {\r\n\r\n    state = {\r\n        isEdit : false\r\n    }\r\n    \r\n\r\n    renderCourse = () => {\r\n        return (\r\n            <li>\r\n                <span>{this.props.details.name}</span>\r\n                <button onClick={() => {this.toggleState()}}>Edit</button>\r\n                <button onClick={() => {this.props.deleteCourse(this.props.index)}}>Delete</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    // toggleState\r\n    toggleState = () => {\r\n        let {isEdit}= this.state;\r\n        this.setState({\r\n            isEdit: !isEdit\r\n        })\r\n    }\r\n\r\n    updateItem = (e) => {\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index, this.input.value );\r\n        this.toggleState();\r\n    }\r\n\r\n    //render update\r\n    renderUpdate =() => {\r\n        return (\r\n            <form onSubmit={this.updateItem}>\r\n                <input type=\"text\" ref={(v) => {this.input = v}} defaultValue={this.props.details.name} />\r\n                <button>Update</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let {isEdit} = this.state\r\n        return (\r\n            <Fragment>\r\n                { isEdit ? this.renderUpdate() : this.renderCourse()}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, {Component} from 'react';\nimport Form from './components/courseForm/form';\nimport List from './components/courseList/list';\n\n\nclass App extends Component {\n\n  state = {\n    courses : [\n      {name: 'HTML'},\n      {name: 'CSS'},\n      {name: 'Python'}\n    ],\n    current : ''\n  }\n\n\n  //update course\n  updateCourse = (e) => {\n    this.setState ({\n      current: e.target.value\n    })\n  }\n\n  // add course\n  addCourse = (e) => {\n    e.preventDefault();\n    let {current} = this.state;\n    let {courses} = this.state;\n    courses.push({name: current});\n    this.setState ({\n      courses: courses,\n      current:''\n    });\n    //e.currentTarget.reset();\n \n  }\n\n  //delete course \n  deleteCourse=(index) => {\n    let {courses} = this.state;\n    courses.splice(index, 1);\n    this.setState({\n      courses: courses\n    })\n    \n\n  }\n\n  //edit course\n  editCourse = (index, value) => {\n    let {courses} = this.state;\n    let course = courses [index];\n    course['name'] = value;\n    this.setState ({\n      courses\n    })\n\n  }\n\n  render() {\n    const {courses} = this.state;\n    const listed = courses.map( (course, index) => {\n      return <List details={course} key={index} index={index} update={this.handleChange} deleteCourse={this.deleteCourse} editCourse={this.editCourse} />\n    })\n    return(\n      <section className=\"App\">\n        <h2>Add Course</h2>\n        <Form current={this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse} />\n        <ul>{listed}</ul>\n      </section>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}